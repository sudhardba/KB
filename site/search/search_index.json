{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"database/postgres/","title":"PostgreSQL","text":"# Learn PostgreSQL  Learn how to use PostgreSQL and Structured Query Language (SQL) to store and query your data.     [![Build Status](https://img.shields.io/travis/dwyl/learn-postgresql/master.svg?style=flat-square)](https://travis-ci.org/dwyl/learn-postgresql) [![codecov.io](https://img.shields.io/codecov/c/github/dwyl/learn-postgresql/master.svg?style=flat-square)](https://codecov.io/github/dwyl/learn-postgresql?branch=master) [![Dependencies: None!](https://david-dm.org/dwyl/learn-postgresql/status.svg?style=flat-square)](https://david-dm.org/dwyl/learn-postgresql) [![devDependencies Status](https://david-dm.org/dwyl/learn-postgresql/dev-status.svg?style=flat-square)](https://david-dm.org/dwyl/learn-postgresql?type=dev) [![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat-square)](https://github.com/dwyl/learn-postgresql/issues)"},{"location":"database/postgres/#why","title":"Why?","text":"<p>Helping people store, retrieve and derive insights from data is the essence of all software applications. </p>"},{"location":"database/postgres/#sql-is-everywhere","title":"SQL is Everywhere","text":"<p>Like it or not, Relational Databases store most of the world's structured data and Structured Query Language (SQL) is by far the most frequent way of retrieving the data.</p> <p>According to the most recent surveys/statistics, SQL still dominates the world of databases.</p> <p>https://insights.stackoverflow.com/survey/2018/#technology-databases </p> <p>https://db-engines.com/en/ranking </p> <p>Note: you should never adopt a technology based on it's current popularity, also be ware of \"argumentum ad populum\" (\"it's popular therefore you should use it\"). Always pick the appropriate tool for the job based on the requirements, constraints and/or availability (both of \"skill\" on your existing team or in the wider community). We include these stats to explain that relational databases are still the most widely used by far and so learning SQL skills is a very wise investment both as an individual and for your team or organisation.</p>"},{"location":"database/postgres/#postgresql-is-easy-to-learn-and-it-runs-everywhere","title":"PostgreSQL is Easy to Learn and it Runs Everywhere!","text":"<p>Getting started with PostgreSQL is easy, (just follow the steps in this guide and try out the example queries!)  When you are ready to deploy your app, you are in safe hands, PostgreSQL runs everywhere:</p> <ul> <li>Travis-CI (free) Integration Testing: https://docs.travis-ci.com/user/database-setup/#postgresql</li> <li>Heroku PostgreSQL (free for MVP: 10k rows): https://www.heroku.com/postgres</li> <li>AWS RDS Postgres (good value + high performance): https://aws.amazon.com/rds/postgresql/</li> <li>Google Cloud SQL: https://cloud.google.com/sql/</li> <li>DigitalOcean: https://www.digitalocean.com/products/managed-databases/</li> <li>Linode: https://www.linode.com/docs/databases/postgresql/create-a-highly-available-postgresql-cluster-using-patroni-and-haproxy/</li> <li>Azure: https://azure.microsoft.com/en-us/services/postgresql/</li> <li>Citus: https://techcrunch.com/2019/01/24/microsoft-acquires-citus-data</li> <li>Self-managed high availability cluster: https://github.com/sorintlab/stolon</li> </ul>"},{"location":"database/postgres/#who","title":"Who?","text":"<p>Everyone building any application that stores data should learn SQL. SQL is ubiquitous in every field/industry and the sooner you learn/master it, the higher your life-time return on time investment.</p> <p>Learning how to use a relational database is a foundational skill for all of computer science and application development.</p> <p>Being proficient in SQL will open the door to Data Science with SQL-on-Hadoop Apache Spark, Google BigQuery, Oracle and Teradata. In short, get really good at SQL! It's very useful.</p>"},{"location":"database/postgres/#what","title":"What?","text":"<p>This tutorial covers 5 areas:</p> <ol> <li>What is PostgreSQL?</li> <li>How do I get started with PostgreSQL? (a fully functioning example!)</li> <li>What is Structured Query Language (SQL)? (lots of example queries!)</li> <li>How do I write my own SQL Queries?</li> <li>How do I deploy my own PostgreSQL-based Application?</li> </ol> <p>Once you have covered these areas, you will know if PostgreSQL is \"right\" for your needs, or if you need to keep looking for a different way to store data.</p> <p>Let's dive in!</p>"},{"location":"database/postgres/#1-what-is-postgresql","title":"1. What is PostgreSQL?","text":"<p>PostgreSQL (often shortened to simply \"Postgres\") is an advanced Relational DataBase Management System (\"RDBMS\"), that lets you efficiently and securely store any type of data. We will explain \"Relational Database\" in the context of our example below, so don't worry if it sounds like a buzzword soup.</p> <p>Postgres has an emphasis on standards compliance and extensibility which means there are many plugins you can use to enhance it like PostGIS for mapping applications and entire projects built on top of it like TimescaleDB (a time-series database perfect for analytics) and AgensGraph (a graph database, great for modelling networks e.g a \"social graph\").</p> <p>Structured Query Language (SQL) is the preferred means of interacting with data at any scale. </p> <p>The only reason MySQL is still more widely used than Postgres can be summarised in one word: WordPress. WordPress has a firm grip on the CMS-based website market and it shows no sign of slowing down. If your goal is to build CMS-based websites, or the company you already work for uses WordPress, you should go for it! If you prefer a more general introduction to SQL, follow this tutorial! The knowledge you will gain by learning Postgres is 95%+ \"transferable\" to other SQL databases so don't worry about the differences between MySQL and Postgres for now. If you're curious, read: https://hackr.io/blog/postgresql-vs-mysql</p>"},{"location":"database/postgres/#how","title":"How?","text":""},{"location":"database/postgres/#installation","title":"Installation","text":"<p>Before you get started with using PostgreSQL, you'll have to install it. Follow these steps to get started:</p>"},{"location":"database/postgres/#macos","title":"MacOS","text":"<ol> <li> <p>There are a couple of ways to install PostgreSQL. One of the easier ways to get started is with Postgres.app. Navigate to https://postgresapp.com/ and then click \"Download\": </p> </li> <li> <p>Once it's finished downloading, double click on the file to unzip then move the PostgreSQL elephant icon into your <code>applications</code> folder. Double click the icon to launch the application.</p> </li> <li> <p>You should now see a new window launched with a list of servers to the left side of the window  (if it's a fresh install, you should see one named <code>PostgreSQL XX</code>).  If it shows anything else or an error props up, make sure you don't have any other instances of Postgres on your computer and reinstall.  To fully reinstall follow these steps to delete data directories and preferences.  Click on the button 'Initialize' (or 'Start' if you had already installed previously). </p> </li> <li> <p>Run <code>sudo mkdir -p /etc/paths.d &amp;&amp; echo /Applications/Postgres.app/Contents/Versions/latest/bin | sudo tee /etc/paths.d/postgresapp</code>  (found here) to use <code>psql</code> in the terminal.  Close and open the terminal.</p> </li> <li> <p>Postgres.app will by default create a role and database that matches your current macOS username. You can connect straight away by running <code>psql</code>.</p> </li> <li> <p>You should then see something in your terminal that looks like this (with your macOS username in front of the prompt rather than 'postgres'):</p> </li> </ol> <p></p> <ol> <li>You should now be all set up to start using PostgreSQL. For documentation on command line tools etc see https://postgresapp.com/documentation/</li> </ol>"},{"location":"database/postgres/#ubuntu","title":"Ubuntu","text":"<p>Digital Ocean have got a great article on getting started with postgres. A quick summary is below.</p>"},{"location":"database/postgres/#installation_1","title":"Installation","text":"<pre><code>sudo apt-get update\nsudo apt-get install postgresql postgresql-contrib\n</code></pre> <p>By default the only role created is the default 'postgres', so PostgreSQL will only respond to connections from an Ubuntu user called 'postgres'. We need to pretend to be that user and create a role matching our actual Ubuntu username:</p> <pre><code>sudo -u postgres createuser --interactive\n</code></pre> <p>This command means 'run the command <code>createuser --interactive</code> as the user called \"postgres\"'.</p> <p>When asked for the name of the role enter your Ubuntu username. If you're not sure, open a new Terminal tab and run <code>whoami</code>.</p> <p>When asked if you want to make the role a superuser, type 'y'.</p> <p>We now need to create the database matching the role name, as PostgreSQL expects this. Run:</p> <pre><code>sudo -u postgres createdb [your user name]\n</code></pre> <p>You can now connect to PostgreSQL by running <code>psql</code>.</p>"},{"location":"database/postgres/#create-your-first-postgresql-database","title":"Create your first PostgreSQL database","text":"<ol> <li> <p>To start PostgreSQL, type this command into the terminal: <code>psql</code> </p> </li> <li> <p>Next type this command into the PostgreSQL interface: <code>CREATE DATABASE test;</code> NOTE: Don't forget the semi-colon. If you do, useful error messages won't show up.</p> </li> <li> <p>To check that our database has been created, type <code>\\l</code> into the psql prompt. You should see something like this in your terminal: </p> </li> </ol>"},{"location":"database/postgres/#create-new-users-for-your-database","title":"Create new users for your database","text":"<ol> <li> <p>If you closed the PostgreSQL server, start it again with: <code>psql</code> </p> </li> <li> <p>To create a new user, type the following into the psql prompt: <code>sql     CREATE USER testuser;</code></p> </li> <li> <p>Check that your user has been created. Type <code>\\du</code> into the prompt. You should see something like this:  Users can be given certain permissions to access any given database you have created.</p> </li> <li> <p>Next we need to give our user permissions to access the test database we created above. Enter the following command into the <code>psql</code> prompt: <code>sql     GRANT ALL PRIVILEGES ON DATABASE test TO testuser;</code></p> </li> </ol>"},{"location":"database/postgres/#postgis-spacial-and-geographic-objects-for-postgresql","title":"PostGIS - Spacial and Geographic objects for PostgreSQL","text":""},{"location":"database/postgres/#postgis-installation","title":"PostGIS Installation","text":"<p>If you've installed Postgres App as in the example above, you can easily extend it to include PostGIS. Follow these steps to begin using PostGIS:</p> <ol> <li> <p>Ensure that you're logged in as a user OTHER THAN <code>postgres</code>. Follow the steps above to enable your default user to be able to access the <code>psql</code> prompt. (installation step 7)</p> </li> <li> <p>Type the following into the <code>psql</code> prompt to add the extension: <code>CREATE EXTENSION postgis;</code></p> </li> </ol>"},{"location":"database/postgres/#postgis-distance-between-two-sets-of-coordinates","title":"PostGIS Distance between two sets of coordinates","text":"<p>After you've extended PostgreSQL with PostGIS you can begin to use it. Type the following command into the <code>psql</code> command line:  </p> <pre><code>SELECT ST_Distance(gg1, gg2) As spheroid_dist\nFROM (SELECT\n    ST_GeogFromText('SRID=4326;POINT(-72.1235 42.3521)') As gg1,\n    ST_GeogFromText('SRID=4326;POINT(-72.1235 43.1111)') As gg2\n    ) As foo  ;\n</code></pre> <p>This should return <code>spheroid_dist</code> along with a value in meters. The example above returns: <code>84315.42034614</code> which is rougly 84.3km between the two points.</p>"},{"location":"database/postgres/#commands","title":"Commands","text":"<p>Once you are serving the database from your computer</p> <ul> <li> <p>To change db <code>\\connect database_name;</code></p> </li> <li> <p>To see the tables in the database <code>\\d;</code></p> </li> <li> <p>To select (and show in terminal) all tables <code>SELECT * FROM table_name</code></p> </li> <li> <p>To make a table <code>CREATE TABLE table_name (col_name1, col_name2)</code></p> </li> <li> <p>To add a row <code>INSERT INTO table_name ( col_name ) VALUES ( col_value)</code> col_name only require if only some of the cols are being filled out</p> </li> <li> <p>To edit a column to a table\u00a0 <code>ALTER TABLE table_name \u00a0 ALTER COLUMN column_name SET DEFAULT expression</code></p> </li> <li> <p>To add a column to a table\u00a0 <code>ALTER TABLE table_name \u00a0 ADD COLUMN column_name data_type</code></p> </li> <li> <p>To find the number of instances where the word \u201cDay\u201d is present in the title of a table <code>SELECT count(title) FROM table_name WHERE title LIKE '%Day%\u2019;</code></p> </li> <li> <p>To delete a row in a table <code>DELETE FROM table_name   WHERE column_name = \u2018hello';</code></p> </li> </ul> <p>Postgresql follows the SQL convention of calling relations TABLES, attributes COLUMNs and tuples ROWS</p> <p>Transaction All or nothing, if something fails the other commands are rolled back like nothing happened</p> <p>Reference When a table is being created you can reference a column in another table to make sure any value which is added to that column exists in the referenced table.</p> <pre><code>CREATE TABLE cities (\n  name text NOT NULL,\n  postal_code varchar(9) CHECK (postal_code &lt;&gt; ''),\n  country_code char(2) REFERENCES countries,\n  PRIMARY KEY (country_code, postal_code)\n);\n</code></pre> <p><code>&lt;&gt;</code> means not equal</p> <p>Join reads You can join tables together when reading them,</p> <p>Inner Join Joins together two tables by specifying a column in each to join them by i.e.</p> <pre><code>SELECT cities.*, country_name\n  FROM cities INNER JOIN countries\n  ON cities.country_code = countries.country_code;\n</code></pre> <p>This will select all of the columns in both the countries and cities tables the data, the rows are matched up by <code>country_code</code>.</p> <p>Grouping You can put rows into groups where the group is defined by a shared value in a particular column.</p> <pre><code>SELECT venue_id, count(*)\n  FROM events\n  GROUP BY venue_id;\n</code></pre> <p>This will group the rows together by the venue_id, count is then performed on each of the groups.</p>"},{"location":"database/postgres/#learning-resources","title":"Learning Resources","text":"<ul> <li>Node-hero: https://blog.risingstack.com/node-js-database-tutorial</li> <li>Pluralsight postgres getting started:   https://www.pluralsight.com/courses/postgresql-getting-started</li> <li>Tech Republic Postgres setup:   https://www.techrepublic.com/article/diy-a-postgresql-database-server-setup-anyone-can-handle/</li> <li>PostGIS installation: https://postgis.net/install</li> <li>PostGIS docs: https://postgis.net/docs/manual-2.3</li> <li>SQl Tutorials: https://www.scaler.com/topics/sql/</li> <li>PostGIS ST_Distance: https://postgis.net/docs/ST_Distance.html</li> <li>Foreign Key Constraints:</li> <li>https://en.wikipedia.org/wiki/Foreign_key</li> <li>https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-foreign-key/</li> <li>https://tableplus.io/blog/2018/08/postgresql-how-to-add-a-foreign-key.html</li> <li>Graphical Interface (GUI) tools: https://wiki.postgresql.org/wiki/Community_Guide_to_PostgreSQL_GUI_Tools</li> </ul>"},{"location":"devops/cicd/","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"devops/cicd/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"devops/cicd/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"}]}